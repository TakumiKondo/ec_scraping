# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on: pull_request_target

# permissions:
#   id-token: write
#   contents: write
  
jobs:
  build:
    name: scraping test and lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
#       - name: Set up JDK 11
#         uses: actions/setup-java@v2
#         with:
#           distribution: 'temurin'
#           java-version: '11'
#       JDKをコメントアウトしたら、Configure AWS CredentialsでJAVA_HOMEのエラーが出なくなった
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
#      - name: Test with Gradle
#        run: ./gradlew test
#      - name: Build with Gradle
#        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
#        with:
#          arguments: -b build.gradle.kts diktatCheck
#       - name: build
#         run: ./gradlew build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
#          role-to-assume: ${{ AWS_ECR_ROLE }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
#      - name: echo test
#         with:
#           role-to-assume: ${{ secrets.AWS_ECR_ROLE }}
#           aws-region: ap-northeast-1
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1
        
#       - name: Build, and push image to Amazon ECR
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO_NAME }}
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
